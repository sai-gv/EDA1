#include <stdio.h>
#include <stdlib.h>

int main() {
    int n, adicionales, i;
    float *calificaciones = NULL;  // Apuntador para las calificaciones
    float suma = 0.0, promedio;

    // 1. Pedir al usuario cuántos estudiantes desea registrar inicialmente
    printf("¿Cuántos estudiantes deseas registrar? ");
    scanf("%d", &n);

    // Validar que n sea positivo
    if (n <= 0) {
        printf("No se registrarán estudiantes.\n");
        return 0;
    }

    // 2. Reservar memoria dinámicamente con malloc()
    calificaciones = (float*) malloc(n * sizeof(float));

    // Verificar si malloc() devolvió NULL
    if (calificaciones == NULL) {
        printf("Error: no se pudo asignar memoria.\n");
        return 1;
    }

    // 3. Capturar calificaciones y calcular promedio inicial
    for (i = 0; i < n; i++) {
        printf("Calificación del estudiante %d: ", i + 1);
        scanf("%f", &calificaciones[i]);
        suma += calificaciones[i];
    }

    promedio = suma / n;
    printf("Promedio inicial: %.2f\n", promedio);

    // 4. Preguntar si desea agregar más estudiantes
    printf("¿Deseas agregar más estudiantes? (cantidad, 0 para no): ");
    scanf("%d", &adicionales);

    // Si el usuario quiere agregar más estudiantes
    if (adicionales > 0) {
        int nuevo_tamano = n + adicionales;

        // 5. Ampliar el tamaño del arreglo con realloc()
        float *temp = (float*) realloc(calificaciones, nuevo_tamano * sizeof(float));

        // Verificar si realloc() falló
        if (temp == NULL) {
            printf("Error: no se pudo ampliar la memoria.\n");
            free(calificaciones);  // Liberar memoria anterior antes de salir
            return 1;
        }

        calificaciones = temp; // Actualizar el apuntador principal

        // Capturar las nuevas calificaciones
        for (i = n; i < nuevo_tamano; i++) {
            printf("Calificación del estudiante %d: ", i + 1);
            scanf("%f", &calificaciones[i]);
            suma += calificaciones[i];
        }

        // Actualizar cantidad total y promedio
        n = nuevo_tamano;
        promedio = suma / n;
    }

    // 6. Mostrar todas las calificaciones y el promedio final
    printf("\n=== Calificaciones registradas ===\n");
    for (i = 0; i < n; i++) {
        printf("Estudiante %d: %.2f\n", i + 1, calificaciones[i]);
    }

    printf("Promedio general: %.2f\n", promedio);

    // 7. Liberar la memoria utilizada
    free(calificaciones);
    printf("Memoria liberada correctamente.\n");

    return 0;
}
